Yönlendirmeler daima öncelikli; Alt kabuklarda bile :

$ echo merhaba > file
$ echo dunya | cat
dunya
$ echo dunya | cat < file
merhaba
$ echo dunya | (cat < file)
merhaba


Tüm dosyalar oluşturulur, çıktı c dosyasına gider :

$ echo merhaba > a > b > c
$ ls
a b c
$ cat a
$ cat b
$ cat c
merhaba


Yerleşik 'exit' fonksiyonu çağırıldığında, eğer bir altkabuk içerisinde değilse ekrana 'exit' yazmalı :

$ (exit)
$ exit
exit
......


Heredoc'lar yönlendirmelerden öncelikli :

$ cat << eof | echo hello > a > b > c
> merhaba
> ^C
$ ls
$ cat << eof | echo hello > a > b > c
> merhaba
> eof
$ ls
a b c
$ cat a
$ cat b
$ cat c
hello


Bulunamayan dosya, kalan komutları çalıştırmaya engel değil :

$ cat < a | echo merhaba
$ bash: a: No such file or directory
$ merhaba


Sonuna eklemeli yönlendirmeler, normal yönlendirme gibi çalışır :

$ echo merhaba dunya >> a >> f
$ ls
a f
$ cat a
$ cat f
merhaba dunya
$ echo merhaba dunya >> a >> f
$ cat f
merhaba dunya
merhaba dunya


Sadece yönlendirme daima dosya içeriğini siler :

$ echo merhaba dunya >> a >> f
$ ls
a f
$ cat a
$ cat f
merhaba dunya
$ echo dunya > a
$ cat a
dunya
$ echo merhaba dunya > a >> f
$ cat a
$ cat f
merhaba dunya
merhaba dunya


Yönlendirmeler boru hatlarından önceliklidir :

$ echo merhaba > a
$ ls
a
$ echo dunya | cat
dunya
$ echo dunya | cat < a
merhaba


Borulama yapılan komutlar eşzamanlı olarak çalıştırılır :

$ cat | cat | ls
file1   file2   folder1     folder2
^C
$


Gömülü 'export' komutu argüman verilmeden çalıştırılır ise aşağıdaki gibi tüm çevre değişkenlerini listeler. \
Eğer değişkenin değeri yok ise sadece ismi yazar :

$ export
declare -x PWD="/home/user"
declare -x USER="user"
....
....
declare -x degeri_olmayan_degisken


Gömülü 'export' komutunda değişken değeri verilmese bile değişken oluşturulur :

$ export a b c=10
$ export
....
declare -x a
declare -x b
declare -x c="10"


Bulunamayan komutlar için hata kodu 127'dir :

$ yok_boyle_bir_sey
bash: yok_boyle_bir_sey: command not found
$ echo $?
127


Değişken isimleri alfabeti bir karakter ile başlamalı ve alfanümerik veya alttan tire (_) karakterleri ile devam etmeli :

$ export 1a=10
bash: export: `1a=10': not a valid identifier
$ export a_1=10
$


Bulunamayan çevre değişkenleri yerine NULL koyulur :

$ echo $USER $bilinmeyen 123
$ ftekdrmi 123


Dolar sonrası sayı varsa dolarla beraber NULL işlemi gerçekleşir :

$ echo $123USER
$ 23USER


Boşluk olmasa bile (<>|&) gibi komutlarda çalışmalıdır :

$ echo merhaba>a>b>c>d
$ cat d
merhaba


Borulama yapılan yerleşik fonksiyonlar alt proses olarak çalışır. Lojik operatörler arasında ise ana prosesde çalıştırılır :

$ echo dsa | cat | sort | echo fdsa | exit
$ exit | echo dsa
dsa
$ export a=10 | echo $a
$ export g=20 && echo $g
20
$


Heredoc'lar daima her şeyden önce yapılır. Hatalardan bile.. :

$ << k (cat) # sözdizimi hatası
> merhaba
> dunya
> k
bash: syntax error near unexpected token `('
$


Sözdizimi hatalarına örnekler :
(Not: Bazı sözdizimi hatalarında bash kendisine uygun bir şekilde girdi
bekliyor. Fakat PDF'de bizden istenmeyen bir durum olduğu için (örneğin
kapanmamış tırnaklar, parantezler gibi) bunları sözdizimi hatası olarak sayıyoruz.)

$ ||
bash: syntax error near unexpected token `||'
$ &&
bash: syntax error near unexpected token `&&'
$ echo |
bash: syntax error near unexpected token `|'
$ echo (d)
bash: syntax error near unexpected token `d'
$ echo a >
bash: syntax error near unexpected token `newline'
$ << a (cat)
> deneme1
> test
a
bash: syntax error near unexpected token `('
$ cat <
bash: syntax error near unexpected token `newline'
$ echo a > (cat | sort)
bash: syntax error near unexpected token `('
$ (cat | sort
bash: syntax error near unexpected token `('


Başarısız olunan bir yönlendirme var ise, diğerlerine devam edilmez :

$ echo merhaba > /test > f < k
bash: /test: Permission denied
$ ls
$ echo merhaba > a > f < k
bash: k: No such file or directory
$ ls
a f
$ cat < f >f
bash: f: No such file or directory
$ echo merhaba > a >> g && cat a && cat g
merhaba
$ ls


Komut ismi olmasa bile yönlendirmeler yapılır :

$ >a>b>c>>d
$ ls
a b c d


Çıktı yönlendirmeleri yapıldıktan sonra, girdi yönlendirmeleri yapılmalı :

$ cat > a < a
$ ls 
a


...
..
.


!BONUS!

Parantez içerisi alt kabuk olarak yorumlanır. Yani içerisinde bulunan
tüm komutlar alt prosesde çalıştırılır. Fakat bu alt kabuk olan kısım
(parantezlerin içerisi) aynı zamanda tek bir komut sayıldığı için,
dosya yönlendirmeleri veya borulama mekanizmalarına dahildir :

$ (ls | cat) | wc
      8       8      50
$ (ls | cat) > f
$ cat f
file1
file2
file3
$ 
>> readline library
    https://ftp.gnu.org/gnu/readline/ adresinden readline-8.2-rc1.tar.gz readline kütüphanesini indir
    dosya dizininde komutları sırası ile çalıştır.
    $./configure --prefix=/Users/ftekdrmi/readline
    $make install


!BONUS(2)!

&& ya da || operatörü kullanıldıysa komutlar sırayla çalıştırılır :

$ echo merhaba && echo dunya
merhaba
dunya


!BONUS(3)!

&& operatörü kullanıldıysa, kendinden önceki komut başarılı
bir şekilde çalıştıysa (0 koduyla çıktıysa) kendinden sonraki
komut çalıştırılır, aksi halde çalıştırılmaz :

$ echo merhaba && echo dunya
merhaba
dunya
$ bash -c "exit 1" && echo a
$


!BONUS(4)!

&& ve || operatörü beraber kullanılır ise, son çalışan komuta göre işlem yapılır :

$ bash -c "exit 1" && echo a || echo f
f
$ bash -c "exit 0" && echo a || echo f
a
$ bash -c "exit 0" || echo merhaba && echo dunya && bash -c "exit 0" || echo naber
dunya